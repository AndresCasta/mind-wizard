{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	// "tween_basic": {
	// 	"scope": "javascript",
	// 	"prefix": "import"
	// 	"body": [
	// 		"this.arena.tween.to($1, ${2:Number.EPSILON}, {",
	// 		"\t$3",
	// 		"});"
	// 	]
	// },

	// #############################################
	// ## TWEEN SYSTEM
	// #############################################
	// #region TWEEN
	"tweenTo": {
		"scope": "javascript",
		"prefix": "tween",
		"body": [
			"this.arena.tween.to(${1:obj}, ${2:Number.EPSILON}, { ${3:alpha}: ${4:1} });$0"
		]
	},
	"tweenToWithLabel": {
		"scope": "javascript",
		"prefix": "tween",
		"body": [
			"this.arena.tween.to(${1:obj}, ${2:Number.EPSILON}, { ${3:alpha}: ${4:1} }, ${5:label});$0"
		]
	},
	"addUniqueLabel": {
		"scope": "javascript",
		"prefix": "tween",
		"body": [
			"const ${1:nameLabel} = this.arena.tween.addUniqueLabel('$1');$0"
		]
	},
	"callback": {
		"scope": "javascript",
		"prefix": "tween",
		"body": [
			"this.arena.tween.to({}, Number.EPSILON, {",
			"\tonComplete: () => {",
			"\t\t$1",
			"\t},",
			"\tonReverseComplete: () => {",
			"\t\t$2",
			"\t}",
			"});$0"
		]
	},
	// #endregion TWEEN

	// #############################################
	// ## IMPORT SYSTEM
	// #############################################
	// #region IMPORT
	"mindPixiContainer": {
		"scope": "javascript",
		"prefix": "import",
		"body": [
			"import { MindPixiContainer } from 'mind-sdk/mindPixi/MindPixiContainer';"
		]
	},
	"mindPixiSprite": {
		"scope": "javascript",
		"prefix": "import",
		"body": [
			"import { MindPixiSprite } from 'mind-sdk/mindPixi/MindPixiSprite';"
		]
	},
	"mindPixiGraphics": {
		"scope": "javascript",
		"prefix": "import",
		"body": [
			"import { MindPixiGraphics } from 'mind-sdk/mindPixi/MindPixiGraphics';"
		]
	},
	"MindPixiText": {
		"scope": "javascript",
		"prefix": "import",
		"body": [
			"import MindPixiText from 'mind-sdk/mindPixi/text/MindPixiText';"
		]
	},
	"MindTextureManager": {
		"scope": "javascript",
		"prefix": "import",
		"body": [
			"import { MindTextureManager } from 'mind-sdk/MindTextureManager';"
		]
	},
	"MindGradient": {
		"scope": "javascript",
		"prefix": "import",
		"body": [
			"import { MindGradient } from 'mind-sdk/MindGradient';"
		]
	},
	"ChainInput": {
		"scope": "javascript",
		"prefix": "import",
		"body": [
			"import { ChainInput } from 'mind-game-components/ChainSelect/ChainInput';",
			"import { ChainItemEvent } from 'mind-game-components/ChainSelect/base-mixin/ChainEvent';"
		]
	},
	"ChainInput styles": {
		"scope": "javascript",
		"prefix": "import",
		"body": [
			"import { styles as ChainInputStyles } from 'mind-game-components/ChainSelect/ChainInput';"
		]
	},
	"BoundaryButton": {
		"scope": "javascript",
		"prefix": "import",
		"body": [
			"import { BoundaryButton } from 'mind-game-components/Button/innerBevelButton/BoundaryButton';"
		]
	},
	"InnerBevelButton styles": {
		"scope": "javascript",
		"prefix": "import",
		"body": [
			"import { styles as BevelButtonStyles } from 'mind-game-components/Button/bevel/BaseBevelButton';"
		]
	},
	"CardManager": {
		"scope": "javascript",
		"prefix": "import",
		"body": [
			"import { CardManager } from 'mind-game-components/cardManager/CardManager';",
			"import { CardHolderEvents } from 'mind-game-components/cardManager/holders/events/CardHolderEvents';"
		]
	},
	"CardManager ResourceCardElement": {
		"scope": "javascript",
		"prefix": "import",
		"body": [
			"import { ResourceCardElement } from 'mind-game-components/cardManager/ui/ResourceCardElement';"
		]
	},
	"CardManager RoundRectCard": {
		"scope": "javascript",
		"prefix": "import",
		"body": [
			"import { RoundRectCard } from 'mind-game-components/cardManager/ui/RoundRectCard';"
		]
	},
	"FrickUtils": {
		"scope": "javascript",
		"prefix": "import",
		"body": [
			"import { FrickUtils } from 'mind-game-components/frick/FrickUtils';"
		]
	},
	"FrickUtils style": {
		"scope": "javascript",
		"prefix": "import",
		"body": [
			"import { styles as frickStyle } from 'mind-game-components/frick/Fricker';"
		]
	},
	"Point object": {
		"scope": "javascript",
		"prefix": "point",
		"body": [
			"{ x: $1 , y: $2 };"
		]
	},
	// #endregion IMPORT

	// #############################################
	// ## CUSTOMS
	// #############################################
	// #region POSITIONING ALGORITHMS
	"basic": {
		"scope": "javascript", // json with comments. See all language identifiers: https://code.visualstudio.com/docs/languages/identifiers
		"prefix": "positioning",
		"body": [
			"let cellSidesPadding = 10;",
			"// Defines the region in which we are goig to positionate the elements.",
			"let layoutX = 100; // layout origin (tope-left corner)",
			"let layoutY = 100; // layout origin (tope-left corner)",
			"let layoutWidth = 128;",
			"let layoutHeight = 58;\n",
			"// A box represents an item.",
			"// Define box dimensions.",
			"let cols = 5;",
			"let boxWidth = layoutWidth / cols;",
			"let rows = 2; // the number of rows to fit the boxes",
			"let boxHeight = layoutHeight / rows; // the height of each row.",
			"let contentWidth = boxWidth - cellSidesPadding;\n",
			
			"// Where sprites is an array of MindPixiSprite instances.\n",
			"for (let i = 0; i < sprites.length; i++) {",
			"\tlet sprite = sprites[i];",
    		"\t// adjust the sprite scale",
    		"\t// Adjust critter width to box's content width",
    		"\tlet scaleFactor = contentWidth / sprite.width;",
    		"\t// Check critter height is not outside of box's content height",
    		"\tif ((sprite.width * scaleFactor) > contentHeight) {",
        	"\t\tscaleFactor = contentHeight / sprite.height;",
    		"}\n",

    		"\t// The position, this supports multirow positioning inside the layout area.",
    		"\tlet thePosition = {",
        	"\t\tx: initX + (i % cols) * boxWidth,",
        	"\t\ty: initY + boxHeight * Math.floor(i / cols)",
    		"\t};\n",

			"\t// Apply the computed scale factor.",
			"\tsprite.scale.set(scaleFactor);\n",

			"\t// Apply the computed position.",
			"\tsprite.position.x = thePos.x;",
			"\tsprite.position.y = thePos.y;\n",

			"}"
		]
	},
	// #endregion POSITIONING ALGORITHMS

	// #region COMMENTS
	"puzzleName": {
		"scope": "javascript,jsonc", // json with comments. See all language identifiers: https://code.visualstudio.com/docs/languages/identifiers
		"prefix": "comment",
		"body": [
			"/**",
			"* Puzzle ${1:1}",
			"*/"
		]
	},

	"region": {
		"scope": "javascript,jsonc", // json with comments. See all language identifiers: https://code.visualstudio.com/docs/languages/identifiers
		"prefix": "comment",
		"body": [
			"// #region $1",
			"$0",
			"// #endregion $1"
		]
	},
	// #endregion COMMENTS

	// #region functions
	"functionExpression": {
		"scope": "javascript", // json with comments. See all language identifiers: https://code.visualstudio.com/docs/languages/identifiers
		"prefix": "fn",
		"body": [
			"const ${1:fn} = function ${1:fn} (${2:args = {\\}}) {",
				"\t// Add args validation here.",
				"\t$0",
			"};"
		]
	},
	"arrowFunction": {
		"scope": "javascript", // json with comments. See all language identifiers: https://code.visualstudio.com/docs/languages/identifiers
		"prefix": "fn",
		"body": [
			"const ${1:fn} = (${2:args = {\\}}) => {",
				"\t// Add args validation here.",
				"\t$0",
			"};"
		]
	},
	"method": {
		"scope": "javascript", // json with comments. See all language identifiers: https://code.visualstudio.com/docs/languages/identifiers
		"prefix": "fn",
		"body": [
			"${1:_methodName} (${2:args = {\\}}) {",
				"\t// Add args validation here.",
				"\t$0",
			"};"
		]
	},
	// #endregion functions

	// #############################################
	// ## CUSTOMS
	// #############################################
	// #region CUSTOMS
	"For Each Method": {
		"scope": "javascript",
		"prefix": "foreach",
		"body": [
			"${1:array}.forEach((${2:elem}) => {",
			"\t$0",
			"});"
		]
	}
	// #endregion CUSTOMS
}